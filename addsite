#!/bin/bash

# Generate passowrds
DBPASS=`< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c12`
SFTPPASS=`< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c12`
ROOTDIR=/var/www/

# Input site name and domain name
echo -n "Enter your site name (spaces and special symbols are not allowed):"
read SITENAME
echo -n "Enter your domain name:"
read DOMAIN

# Check if the /var/www/$SITENAME dir exists
if [ -d "${ROOTDIR}${SITENAME}" ]; then
    echo "Error: directory /var/www/$SITENAME already exists"
    exit 1
fi

# Creating the working directory
HOMEDIR=${ROOTDIR}${SITENAME}
mkdir /var/www/$SITENAME

# Create a new Linux user and add it to sftp group
echo "Creating user $SITENAME..."
useradd $SITENAME -m -G sftp -s "/bin/false" -d "/var/www/$SITENAME" 2>> $HOMEDIR/deploy.log
if [ "$?" -ne 0 ]; then
	echo "Can't add user"
	exit 1
fi
echo $SFTPPASS > ./tmp
echo $SFTPPASS >> ./tmp
cat ./tmp | passwd $SITENAME 2>> $HOMEDIR/deploy.log
rm ./tmp

# Assigning permissions to the working directory
chmod -R 755 /var/www/$SITENAME/
chown -R $SITENAME:$SITENAME /var/www/$SITENAME/
chown root:root /var/www/$SITENAME

# Install necessary dependencies and log to deploy.log
echo "Installing Nginx, Python pip, and MySQL server..."
apt install -y nginx python3-pip mysql-server libmysqlclient-dev &> $HOMEDIR/deploy.log
pip3 install virtualenv >> $HOMEDIR/deploy.log

# Setup Python virtual environment, Django, Gunicorn, and Python MySQL connector
mkdir -p $HOMEDIR/env 
echo "Trying to set up a virtual environment..."
virtualenv -p python3 $HOMEDIR/env >> $HOMEDIR/deploy.log
source $HOMEDIR/env/bin/activate
pip install gunicorn django mysqlclient >> $HOMEDIR/deploy.log
cd ${HOMEDIR}
django-admin.py startproject app .
cd ${ROOTDIR}

# Add the domain to ALLOWED_HOSTS in the settings.py
FINDTHIS="ALLOWED_HOSTS = \[\]"
TOTHIS="ALLOWED_HOSTS = \[\'$DOMAIN\'\]"
sed -i -e "s/$FINDTHIS/$TOTHIS/g" ${HOMEDIR}/app/settings.py

# Create NGINX config file
echo "Creating NGINX config file..."
echo "server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;
    error_log /var/log/nginx/$SITENAME.error.log;
    access_log /var/log/nginx/$SITENAME.access.log;

    location /static/ {
        alias /var/www/$SITENAME;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn_$SITENAME.sock;
    }
}" > /etc/nginx/sites-available/$SITENAME.conf
ln -s /etc/nginx/sites-available/$SITENAME.conf /etc/nginx/sites-enabled/$SITENAME.conf >> $HOMEDIR/deploy.log
systemctl restart nginx

# Create Gunicorn config file
echo "Creating Gunicorn config file..."
echo "[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=$USER
Group=www-data
WorkingDirectory=${HOMEDIR}
ExecStart=$HOMEDIR/env/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunicorn_$SITENAME.sock app.wsgi:application

[Install]
WantedBy=multi-user.target
" > /etc/systemd/system/gunicorn_$SITENAME.service

# exit from the virtual environment and restart Gunicorn
deactivate
systemctl start gunicorn_$SITENAME
systemctl enable gunicorn_$SITENAME

# Create a database and add the necessary config lines to app/settings.py
SQL="CREATE DATABASE IF NOT EXISTS $SITENAME DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
CREATE USER '$SITENAME'@'localhost' IDENTIFIED BY '$DBPASS';
GRANT ALL PRIVILEGES ON $SITENAME.* TO '$SITENAME'@'localhost';
FLUSH PRIVILEGES;"
mysql -uroot -e "$SQL"
FINDTHIS="'default': {"
TOTHIS="'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': '$SITENAME',\n        'USER': '$SITENAME',\n        'PASSWORD': '$DBPASS',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    },\n    'SQLite': {"
sed -i -e "s/$FINDTHIS/$TOTHIS/g" ${HOMEDIR}/app/settings.py
source $HOMEDIR/env/bin/activate

# Save passwords and helpers to pass.txt
echo "
Done!
MySQL/SFTP username: $SITENAME
MySQL password: $DBPASS
SFTP password: $SFTPPASS

Things to do:
Go to the working directory: cd $HOMEDIR
Activate virtual environment: source $HOMEDIR/env/bin/activate
Create Django super user: ./manage.py createsuperuser
Apply migrations: ./manage.py makemigrations && ./manage.py migrate
" > /var/www/$SITENAME/pass.txt

# Create .gitignore file
GIT_IGNORE="__pycache__/
db.sqlite3
pass.txt
migrations/
media/
env/"
echo $GIT_IGNORE > /var/www/$SITENAME/.gitignore

# Print pass.txt
cat /var/www/$SITENAME/pass.txt
